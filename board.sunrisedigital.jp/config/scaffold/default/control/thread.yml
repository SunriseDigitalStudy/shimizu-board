## YAML Template.
---
#対処テーブルのレコードクラス名
model: Bd_Orm_Main_Thread

#ページのタイトルとして表示
page_name: Thread

#戻したいページがあるときに利用
navi: 
    label: <i class="fa fa-chevron-left"></i> ジャンルに戻る
    uri: /control/genre
    
#登録用フォームの設定
form:
#    sequence:
#        column: sequence
#        direction: DESC
        
#キー配下にカラム名をキーに設定。フォームエレメントの生成はORMが生成するFormクラスから生成される
    fields: 
    
    #Autoincrementの主キーも指定する必要がある
      id:
    #label:はフォームエレメントのタイトルとして表示
        settings: 
          label: ID
        
      title:
        settings:
          label: タイトル
#        write_onry: true
#        setter: raw_password
#        empty_value: 0
#        comments:
#            -何か注意書き等のコメント記述可能。HTMLもレンダリングされる
#            -複数指定可能
#            -一つでも配列にする
            
      genre_id:
        settings: 
          label: ジャンル
    
    #多対多のリレーションをorm.ymlに設定するとFormクラスにcreateMM～メソッドが生成される
    #キー名は"リレーション名＿カラム名"で指定します。
    #リレーション名は、デフォルトではテーブル名をCamelCaseにしたもの
      Tag__id:
        settings: 
          label: タグ
        
grouping:
    fixed:
      target: genre_id
      model:
          name: Bd_Orm_Main_Genre
          display: name
        
#リスト用の設定
list:
#    filter: Bd_Scaffold_Filter_Thread
    
    #1ページの数を指定。省略すると全件表示される
    per_page: 5
    
    #リストを取得するメソッドを指定。並び順の変更はこれを利用
    #ここに指定するメソッドは必ず$selectを引数に受け取って取得に利用
    method: fetchAllNewerOrdered
    
    #それぞれ、削除ボタン、編集ボタンのラベルを指定。省略可能。HTMLレンダリングをする。
    #編集、削除ボタン、及び並び替えボタンはいちばん左にまとめて表示される
#    delete_label: <i class="fa fa-edit"></i>削除
#    edit_label: edit
    
    #リストの各アイテムの見出し部分、footer部分にテンプレートをインクルード可能
    #`$record`と`$config`の変数がテンプレートにアサインされる
    #heading部分は一行でoverflow:hidden
#    item_heading: default/thread/list-heading.tpl
#    item_footer: default/thread/list-footer.tpl
    
    prevent_delete: true
    
    #表示設定
    display:
        - label: <i class="fa fa-edit"></i> 編集
          action: edit
        
        #column:は$record->get('XXX')が呼ばれる
        #get('some_column')を呼ぶとgetSomeColumn()を探し、存在した場合はそのメソッドを呼ぶ
        - label: ID
          column: id
#          style: width:70px;
          
        - label: タイトル
#          column: title
          html: <a href="/thread/title?thread_id=%record:id%">%record:title%</a>
          
        #$record->get()は.区切りの引数を分解して繰り返し呼ぶ（ここでは$record->get('genre')->get('name')が呼ばれる）
        - label: ジャンル
          column: genre.name
#          style: width:30%;min-width:100px;      
          
        #html:はそのままHTMLとして表示される          
#        - label: ジャンル
#          html: <a href="/control/genre?id=%record:genre_id%">ジャンル編集</a>
          
        - label: 登録日時
          column: create_at
          
#        - label: 削除
#          action: delete
 
#grouping:
##    表示名
#    name: ジャンル
#    model:
##    ORMのレコードクラス名
#        name: Bd_Orm_Main_Genre
##    リスト取得用のメソッド
#        method: fetchAll
##   表示に使われるデータの指定
#        display: name
#    strict: false

grouping:
    name: ジャンル
    class:
        model: Bd_Orm_Main_Const_Thread
        method: getGenreList
        target: genre_id
        display: getGenreCode
    strict: false
    
    fixed:
        target: genre_id
        class:
            model: Bd_Orm_Main_Const_Thread
            display: getGenreCode